#!/usr/bin/env python3
# coding=utf-8

'''Make network profiles
'''

# Standard library imports.
import sys
import atexit
import os
import gc
import logging
from os.path import join, splitext

# Related third party imports.
import yaml

# Local application/library specific imports.
# import app_specific_mod

# Relevant ``__all__`` specification here.
# __all__ = ...

# GLOBAL CONSTANT names.  *if main* section at bottom sets global names too.
# Program name from file name.
PN = os.path.splitext(sys.argv[0])[0]
LOGGING_FMT = '[{0}]: %(message)s'.format(PN)
DATA_DIR = './_data'
DATA_FP = join(DATA_DIR, 'network_profiles.yml')
SITE_CFG_FP = './_config.yml'
NETWORK_INCLUDE_ROOT_FP = './_includes/network_profiles'
NETWORKS_INCLUDE = {
        'text': {
            'all': join(NETWORK_INCLUDE_ROOT_FP, 'text', 'all.html')
            }
        }

def on_exit():
    '''Actions to do on exit.'''
    # Invoke the garbage collector.
    gc.collect()

atexit.register(on_exit)
logging.basicConfig(format=LOGGING_FMT, level=logging.INFO)

with open(SITE_CFG_FP) as f:
    SITE_CFG = yaml.safe_load(f.read())

with open(DATA_FP) as f:
    DATA = yaml.safe_load(f.read())
    TEXT_TMPL_ENTRY = DATA['text_tmpl_entry']

# all
entries = ''.join([TEXT_TMPL_ENTRY.format(site_baseurl=SITE_CFG['baseurl'],
    uri=inetwork['uri'], network=inetwork['network'])
    for inetwork in DATA['profiles']])
with open(NETWORKS_INCLUDE['text']['all'], 'w') as f:
    f.write(DATA['text_tmpl'].format(entries=entries))
